{"ast":null,"code":"import { authAPI } from \"../../api/api\";\nimport { stopSubmit } from 'redux-forms/lib/reducer';\nconst SET_AUTH_USER_DATA = 'auth/SET_AUTH_USER_DATA';\nlet initialState = {\n  userId: null,\n  email: null,\n  login: null,\n  isAuth: false\n};\n\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_AUTH_USER_DATA:\n      return { ...state,\n        ...action.payload\n      };\n\n    default:\n      return;\n  }\n};\n\nexport const setAuthUserData = (userId, email, login, isAuth) => ({\n  type: SET_AUTH_USER_DATA,\n  payload: {\n    userId,\n    email,\n    login,\n    isAuth\n  }\n});\nexport const getAuthUserData = () => async dispatch => {\n  let response = await authAPI.me();\n\n  if (response.data.resultCode === 0) {\n    let {\n      id,\n      email,\n      login\n    } = response.data.data;\n    dispatch(setAuthUserData(id, email, login, true));\n  }\n};\nexport const login = (email, password, remember) => dispatch => {\n  let response = awaitauthAPI.login(email, password, remember).then(response => {\n    if (response.data.resultCode === 0) {\n      dispatch(getAuthUserData());\n    } else {\n      let messege = response.data.messages.length > 0 ? response.data.messages[0] : \"error\";\n      dispatch(stopSubmit('login', {\n        _error: 'Common error'\n      }));\n    }\n  });\n};\nexport const logout = () => dispatch => {\n  authAPI.logout().then(response => {\n    if (response.data.resultCode === 0) {\n      dispatch(setAuthUserData(null, null, null, false));\n    }\n  });\n};\nexport default authReducer;","map":{"version":3,"sources":["/Users/itshatle/Desktop/rest/reac/src/components/redux/auth-reducer.js"],"names":["authAPI","stopSubmit","SET_AUTH_USER_DATA","initialState","userId","email","login","isAuth","authReducer","state","action","type","payload","setAuthUserData","getAuthUserData","dispatch","response","me","data","resultCode","id","password","remember","awaitauthAPI","then","messege","messages","length","_error","logout"],"mappings":"AAAA,SAASA,OAAT,QAAwB,eAAxB;AACA,SAAQC,UAAR,QAAyB,yBAAzB;AAEA,MAAMC,kBAAkB,GAAG,yBAA3B;AAGA,IAAIC,YAAY,GAAG;AAChBC,EAAAA,MAAM,EAAE,IADQ;AAEhBC,EAAAA,KAAK,EAAE,IAFS;AAGhBC,EAAAA,KAAK,EAAE,IAHS;AAIhBC,EAAAA,MAAM,EAAE;AAJQ,CAAnB;;AAOA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KAAkC;AAClD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKT,kBAAL;AACI,aAAO,EACH,GAAGO,KADA;AAEH,WAAGC,MAAM,CAACE;AAFP,OAAP;;AAMR;AACI;AATJ;AAWH,CAZD;;AAcA,OAAO,MAAMC,eAAe,GAAG,CAACT,MAAD,EAASC,KAAT,EAAgBC,KAAhB,EAAuBC,MAAvB,MAC1B;AAACI,EAAAA,IAAI,EAAET,kBAAP;AAA2BU,EAAAA,OAAO,EAAC;AAACR,IAAAA,MAAD;AAASC,IAAAA,KAAT;AAAgBC,IAAAA,KAAhB;AAAuBC,IAAAA;AAAvB;AAAnC,CAD0B,CAAxB;AAGP,OAAO,MAAMO,eAAe,GAAG,MAAM,MAAOC,QAAP,IAAoB;AACtD,MAAIC,QAAQ,GAAG,MAAMhB,OAAO,CAAEiB,EAAT,EAArB;;AAEK,MAAGD,QAAQ,CAACE,IAAT,CAAcC,UAAd,KAA6B,CAAhC,EAAkC;AAC9B,QAAI;AAACC,MAAAA,EAAD;AAAKf,MAAAA,KAAL;AAAYC,MAAAA;AAAZ,QAAqBU,QAAQ,CAACE,IAAT,CAAcA,IAAvC;AACFH,IAAAA,QAAQ,CAACF,eAAe,CAACO,EAAD,EAAKf,KAAL,EAAYC,KAAZ,EAAmB,IAAnB,CAAhB,CAAR;AACD;AAER,CARM;AAUP,OAAO,MAAMA,KAAK,GAAG,CAACD,KAAD,EAAQgB,QAAR,EAAkBC,QAAlB,KAAgCP,QAAD,IAAc;AAG9D,MAAIC,QAAQ,GAAGO,YAAY,CAAEjB,KAAd,CAAoBD,KAApB,EAA2BgB,QAA3B,EAAqCC,QAArC,EAA+CE,IAA/C,CAAoDR,QAAQ,IAAI;AAC3E,QAAGA,QAAQ,CAACE,IAAT,CAAcC,UAAd,KAA6B,CAAhC,EAAkC;AAC/BJ,MAAAA,QAAQ,CAACD,eAAe,EAAhB,CAAR;AACF,KAFD,MAEO;AACH,UAAIW,OAAO,GAAGT,QAAQ,CAACE,IAAT,CAAcQ,QAAd,CAAuBC,MAAvB,GAAgC,CAAhC,GAAoCX,QAAQ,CAACE,IAAT,CAAcQ,QAAd,CAAuB,CAAvB,CAApC,GAAgE,OAA9E;AACAX,MAAAA,QAAQ,CAACd,UAAU,CAAC,OAAD,EAAU;AAAC2B,QAAAA,MAAM,EAAE;AAAT,OAAV,CAAX,CAAR;AACH;AAEF,GARY,CAAf;AASH,CAZM;AAcP,OAAO,MAAMC,MAAM,GAAG,MAAOd,QAAD,IAAc;AACtCf,EAAAA,OAAO,CAAE6B,MAAT,GAAkBL,IAAlB,CAAuBR,QAAQ,IAAI;AAC/B,QAAGA,QAAQ,CAACE,IAAT,CAAcC,UAAd,KAA6B,CAAhC,EAAkC;AAC9BJ,MAAAA,QAAQ,CAACF,eAAe,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,KAAnB,CAAhB,CAAR;AACF;AACH,GAJH;AAKH,CANM;AAQP,eAAeL,WAAf","sourcesContent":["import { authAPI } from \"../../api/api\";\nimport {stopSubmit} from 'redux-forms/lib/reducer'\n\nconst SET_AUTH_USER_DATA = 'auth/SET_AUTH_USER_DATA';\n\n\nlet initialState = {\n   userId: null,\n   email: null,\n   login: null,\n   isAuth: false\n}\n\nconst authReducer = (state = initialState, action) => {\n    switch(action.type){\n        case SET_AUTH_USER_DATA:\n            return {\n                ...state, \n                ...action.payload,\n                  \n            }\n\n    default:\n        return\n    }\n}\n\nexport const setAuthUserData = (userId, email, login, isAuth) => \n    ({type: SET_AUTH_USER_DATA, payload:{userId, email, login, isAuth}});\n\nexport const getAuthUserData = () => async (dispatch) => {\n   let response = await authAPI .me()\n   \n        if(response.data.resultCode === 0){\n            let {id, email, login} = response.data.data;\n          dispatch(setAuthUserData(id, email, login, true));\n        }\n      \n}\n\nexport const login = (email, password, remember) => (dispatch) => {\n   \n        \n    let response = awaitauthAPI .login(email, password, remember).then(response => {\n        if(response.data.resultCode === 0){\n           dispatch(getAuthUserData())\n        } else {\n            let messege = response.data.messages.length > 0 ? response.data.messages[0] : \"error\";\n            dispatch(stopSubmit('login', {_error: 'Common error'}));\n        }\n            \n      });\n}\n\nexport const logout = () => (dispatch) => {\n    authAPI .logout().then(response => {\n        if(response.data.resultCode === 0){\n            dispatch(setAuthUserData(null, null, null, false));\n         }\n      });\n}\n\nexport default authReducer;"]},"metadata":{},"sourceType":"module"}