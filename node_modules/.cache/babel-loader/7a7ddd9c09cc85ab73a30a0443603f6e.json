{"ast":null,"code":"import { authAPI } from \"../../api/api\";\nimport { stopSubmit } from 'redux-forms/lib/reducer';\nimport { getAuthUserData } from './auth-reducer';\nconst INITIALIZED_SUCCESS = 'INITIALIZED_SUCCESS';\nlet initialState = {\n  initialized: false\n};\n\nconst appReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case INITIALIZED_SUCCESS:\n      return { ...state,\n        initialized: true\n      };\n\n    default:\n      return;\n  }\n};\n\nexport const setInitialisedSuccess = () => ({\n  type: INITIALIZED_SUCCESS\n});\nexport const initialiseApp = () => dispatch => {\n  let promi = dispatch(getAuthUserData()); //dispatch(somethingelse())\n  //dispatch(somethingelse())\n\n  dispatch(setInitialisedSuccess());\n};\nexport const login = (email, password, remember) => dispatch => {\n  authAPI.login(email, password, remember).then(response => {\n    if (response.data.resultCode === 0) {\n      dispatch(getAuthUserData());\n    } else {\n      let messege = response.data.messages.length > 0 ? response.data.messages[0] : \"error\";\n      dispatch(stopSubmit('login', {\n        _error: 'Common error'\n      }));\n    }\n  });\n};\nexport const logout = () => dispatch => {\n  authAPI.logout().then(response => {\n    if (response.data.resultCode === 0) {\n      dispatch(setAuthUserData(null, null, null, false));\n    }\n  });\n};\nexport default appReducer;","map":{"version":3,"sources":["/Users/itshatle/Desktop/rest/reac/src/components/redux/app-reducer.js"],"names":["authAPI","stopSubmit","getAuthUserData","INITIALIZED_SUCCESS","initialState","initialized","appReducer","state","action","type","setInitialisedSuccess","initialiseApp","dispatch","promi","login","email","password","remember","then","response","data","resultCode","messege","messages","length","_error","logout","setAuthUserData"],"mappings":"AAAA,SAASA,OAAT,QAAwB,eAAxB;AACA,SAAQC,UAAR,QAAyB,yBAAzB;AACA,SAAQC,eAAR,QAA8B,gBAA9B;AAEA,MAAMC,mBAAmB,GAAG,qBAA5B;AAGA,IAAIC,YAAY,GAAG;AAChBC,EAAAA,WAAW,EAAE;AADG,CAAnB;;AAKA,MAAMC,UAAU,GAAG,CAACC,KAAK,GAAGH,YAAT,EAAuBI,MAAvB,KAAkC;AACjD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKN,mBAAL;AACI,aAAO,EACH,GAAGI,KADA;AAEHF,QAAAA,WAAW,EAAE;AAFV,OAAP;;AAMR;AACI;AATJ;AAWH,CAZD;;AAcA,OAAO,MAAMK,qBAAqB,GAAG,OAChC;AAACD,EAAAA,IAAI,EAAEN;AAAP,CADgC,CAA9B;AAGP,OAAO,MAAMQ,aAAa,GAAG,MAAOC,QAAD,IAAc;AAC7C,MAAIC,KAAK,GAAGD,QAAQ,CAACV,eAAe,EAAhB,CAApB,CAD6C,CAE7C;AACA;;AACAU,EAAAA,QAAQ,CAACF,qBAAqB,EAAtB,CAAR;AACH,CALM;AAOP,OAAO,MAAMI,KAAK,GAAG,CAACC,KAAD,EAAQC,QAAR,EAAkBC,QAAlB,KAAgCL,QAAD,IAAc;AAG9DZ,EAAAA,OAAO,CAAEc,KAAT,CAAeC,KAAf,EAAsBC,QAAtB,EAAgCC,QAAhC,EAA0CC,IAA1C,CAA+CC,QAAQ,IAAI;AACvD,QAAGA,QAAQ,CAACC,IAAT,CAAcC,UAAd,KAA6B,CAAhC,EAAkC;AAC/BT,MAAAA,QAAQ,CAACV,eAAe,EAAhB,CAAR;AACF,KAFD,MAEO;AACH,UAAIoB,OAAO,GAAGH,QAAQ,CAACC,IAAT,CAAcG,QAAd,CAAuBC,MAAvB,GAAgC,CAAhC,GAAoCL,QAAQ,CAACC,IAAT,CAAcG,QAAd,CAAuB,CAAvB,CAApC,GAAgE,OAA9E;AACAX,MAAAA,QAAQ,CAACX,UAAU,CAAC,OAAD,EAAU;AAACwB,QAAAA,MAAM,EAAE;AAAT,OAAV,CAAX,CAAR;AACH;AAEF,GARH;AASH,CAZM;AAcP,OAAO,MAAMC,MAAM,GAAG,MAAOd,QAAD,IAAc;AACtCZ,EAAAA,OAAO,CAAE0B,MAAT,GAAkBR,IAAlB,CAAuBC,QAAQ,IAAI;AAC/B,QAAGA,QAAQ,CAACC,IAAT,CAAcC,UAAd,KAA6B,CAAhC,EAAkC;AAC9BT,MAAAA,QAAQ,CAACe,eAAe,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,KAAnB,CAAhB,CAAR;AACF;AACH,GAJH;AAKH,CANM;AAQP,eAAerB,UAAf","sourcesContent":["import { authAPI } from \"../../api/api\";\nimport {stopSubmit} from 'redux-forms/lib/reducer'\nimport {getAuthUserData} from './auth-reducer'\n\nconst INITIALIZED_SUCCESS = 'INITIALIZED_SUCCESS';\n\n\nlet initialState = {\n   initialized: false,\n   \n}\n\nconst appReducer = (state = initialState, action) => {\n    switch(action.type){\n        case INITIALIZED_SUCCESS:\n            return {\n                ...state, \n                initialized: true,\n                  \n            }\n\n    default:\n        return\n    }\n}\n\nexport const setInitialisedSuccess = () => \n    ({type: INITIALIZED_SUCCESS});\n\nexport const initialiseApp = () => (dispatch) => {\n    let promi = dispatch(getAuthUserData());\n    //dispatch(somethingelse())\n    //dispatch(somethingelse())\n    dispatch(setInitialisedSuccess())\n}\n\nexport const login = (email, password, remember) => (dispatch) => {\n   \n        \n    authAPI .login(email, password, remember).then(response => {\n        if(response.data.resultCode === 0){\n           dispatch(getAuthUserData())\n        } else {\n            let messege = response.data.messages.length > 0 ? response.data.messages[0] : \"error\";\n            dispatch(stopSubmit('login', {_error: 'Common error'}));\n        }\n            \n      });\n}\n\nexport const logout = () => (dispatch) => {\n    authAPI .logout().then(response => {\n        if(response.data.resultCode === 0){\n            dispatch(setAuthUserData(null, null, null, false));\n         }\n      });\n}\n\nexport default appReducer;"]},"metadata":{},"sourceType":"module"}