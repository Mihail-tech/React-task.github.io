{"ast":null,"code":"var _jsxFileName = \"/Users/itshatle/Desktop/rest/reac/src/components/common/Preloader/Paginator/Paginator.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport classes from \"../../../Recomendation/Users.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nlet Paginator = ({\n  totalItemCount,\n  pageSize,\n  currentPage,\n  onPageChanged,\n  porti = 10\n}) => {\n  _s();\n\n  let pagesCount = Math.ceil(totalItemCount / pageSize);\n  let pages = [];\n\n  for (let i = 1; i <= pagesCount; i++) {\n    pages.push(i);\n  }\n\n  let portiCount = Math.ceil(pagesCount / porti);\n  const [portiNumber, setportiNumber] = useState(1);\n  let leftPortiPage = (portiNumber - 1) * porti + 1;\n  let rightPortiPage = portiNumber + porti;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.paginator,\n    children: [portiNumber > 1 && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setportiNumber(portiNumber - 1),\n      children: \" back \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 17\n    }, this), pages.filter(p => p >= leftPortiPage && p <= rightPortiPage).map(p => {\n      return;\n    }), portiCount > portiNumber && /*#__PURE__*/_jsxDEV(\"button\", {\n      onCanPlay: () => {\n        setportiNumber(portiNumber + 1);\n      },\n      children: \" next \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 13\n  }, this);\n};\n\n_s(Paginator, \"PiknfEj7r3wpU96n4E772np8dpU=\");\n\n_c = Paginator;\nexport default Paginator;\n\nvar _c;\n\n$RefreshReg$(_c, \"Paginator\");","map":{"version":3,"sources":["/Users/itshatle/Desktop/rest/reac/src/components/common/Preloader/Paginator/Paginator.jsx"],"names":["React","useState","classes","Paginator","totalItemCount","pageSize","currentPage","onPageChanged","porti","pagesCount","Math","ceil","pages","i","push","portiCount","portiNumber","setportiNumber","leftPortiPage","rightPortiPage","paginator","filter","p","map"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,OAAP,MAAoB,yCAApB;;;AAOA,IAAIC,SAAS,GAAG,CAAC;AAACC,EAAAA,cAAD;AAAiBC,EAAAA,QAAjB;AAA2BC,EAAAA,WAA3B;AAAwCC,EAAAA,aAAxC;AAAuDC,EAAAA,KAAK,GAAG;AAA/D,CAAD,KAAwE;AAAA;;AAEpF,MAAIC,UAAU,GAAGC,IAAI,CAACC,IAAL,CAAUP,cAAc,GAAGC,QAA3B,CAAjB;AAEA,MAAIO,KAAK,GAAG,EAAZ;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIJ,UAArB,EAAiCI,CAAC,EAAlC,EAAsC;AAClCD,IAAAA,KAAK,CAACE,IAAN,CAAWD,CAAX;AAEH;;AACD,MAAIE,UAAU,GAAGL,IAAI,CAACC,IAAL,CAAUF,UAAU,GAAGD,KAAvB,CAAjB;AAEA,QAAM,CAACQ,WAAD,EAAcC,cAAd,IAAgChB,QAAQ,CAAC,CAAD,CAA9C;AAEA,MAAIiB,aAAa,GAAG,CAACF,WAAW,GAAG,CAAf,IAAoBR,KAApB,GAA4B,CAAhD;AACA,MAAIW,cAAc,GAAGH,WAAW,GAAGR,KAAnC;AAGA,sBACQ;AAAK,IAAA,SAAS,EAAEN,OAAO,CAACkB,SAAxB;AAAA,eAGMJ,WAAW,GAAG,CAAd,iBACF;AAAQ,MAAA,OAAO,EAAE,MAAMC,cAAc,CAACD,WAAW,GAAG,CAAf,CAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJJ,EAMUJ,KAAK,CACES,MADP,CACcC,CAAC,IAAIA,CAAC,IAAIJ,aAAL,IAAsBI,CAAC,IAAIH,cAD9C,EAEOI,GAFP,CAEYD,CAAD,IAAO;AAAE;AAAS,KAF7B,CANV,EA2BKP,UAAU,GAAGC,WAAb,iBACD;AAAQ,MAAA,SAAS,EAAE,MAAK;AAACC,QAAAA,cAAc,CAACD,WAAW,GAAG,CAAf,CAAd;AAAiC,OAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YA5BJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADR;AAmCH,CApDD;;GAAIb,S;;KAAAA,S;AAwDJ,eAAeA,SAAf","sourcesContent":["import React, { useState } from 'react';\nimport classes from \"../../../Recomendation/Users.module.css\"\n\n\n\n\n\n\nlet Paginator = ({totalItemCount, pageSize, currentPage, onPageChanged, porti = 10}) => {\n\n    let pagesCount = Math.ceil(totalItemCount / pageSize);\n\n    let pages = [];\n    for (let i = 1; i <= pagesCount; i++) {\n        pages.push(i);\n        \n    }\n    let portiCount = Math.ceil(pagesCount / porti);\n\n    const [portiNumber, setportiNumber] = useState(1);\n\n    let leftPortiPage = (portiNumber - 1) * porti + 1;\n    let rightPortiPage = portiNumber + porti;\n\n\n    return (\n            <div className={classes.paginator}>\n\n\n                { portiNumber > 1 &&\n                <button onClick={() => setportiNumber(portiNumber - 1)} > back </button> }\n\n                    { pages\n                            .filter(p => p >= leftPortiPage && p <= rightPortiPage)\n                            .map((p) => { return  }) }\n                \n                {/* {portiNumber > 1 &&\n                \n                    <button onClick={() => setportiNumber(portiNumber - 1) } > back </button>\n                        {pages\n                            .filter(p => p >= leftPortiPage && p <= rightPortiPage)\n                                .map((p) => {\n                                    return <div className={cn({[classes.selectedPage] : currentPage === p}, classes.pageNumber) }\n                                            key={p}\n                                            onClick={(e)=> {onPageChanged(p)}}>\n\n                                            {p}\n                                        </div>\n                            }  \n                                  \n                        \n                }) }}}}} */}\n\n                {portiCount > portiNumber && \n                <button onCanPlay={()=> {setportiNumber(portiNumber + 1) }} > next </button> }\n                \n              \n\n            </div>\n    )\n}\n\n\n\nexport default Paginator;"]},"metadata":{},"sourceType":"module"}