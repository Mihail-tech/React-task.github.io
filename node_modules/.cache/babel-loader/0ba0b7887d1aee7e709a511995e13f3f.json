{"ast":null,"code":"import { usersAPI } from \"../../api/api\";\nconst ADD_POST = 'ADD_POST';\nconst UPDATE_NEW_POST_TEXT = 'UPDATE-NEW-POST-TEXT';\nconst SET_USER_PROFILE = 'SET_USER_PROFILE';\nconst SET_STATUS = 'SET_STATUS';\nlet initialState = {\n  PostsData: [{\n    id: 1,\n    messange: \"hi\",\n    like: 12\n  }, {\n    id: 2,\n    messange: \"hi\",\n    like: 23\n  }],\n  newPostText: \"what happen?\",\n  profile: null,\n  status: ''\n};\n\nconst profileReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST:\n      {\n        let newPost = {\n          id: 5,\n          message: state.newPostText,\n          like: 0\n        };\n        return { ...state,\n          PostsData: [...state.PostsData, newPost],\n          newPostText: ''\n        };\n      }\n\n    case UPDATE_NEW_POST_TEXT:\n      {\n        return { ...state,\n          newPostText: action.newText\n        };\n      }\n\n    case SET_USER_PROFILE:\n      {\n        return { ...state,\n          profile: action.profile\n        };\n      }\n\n    case SET_STATUS:\n      {\n        return { ...state,\n          status: action\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const addPostActionCreator = () => {\n  return {\n    type: ADD_POST\n  };\n};\nexport const updateNewPostTextActionCreator = text => {\n  return {\n    type: UPDATE_NEW_POST_TEXT,\n    newText: text\n  };\n};\nexport const setUserProfile = profile => {\n  return {\n    type: SET_USER_PROFILE,\n    profile\n  };\n};\nexport const getUserProfile = userId => dispatch => {\n  usersAPI.getProfile(userId).then(response => {\n    dispatch(setUserProfile(response.data));\n  }); // ({type:SET_USER_PROFILE, profile})\n};\nexport default profileReducer;","map":{"version":3,"sources":["/Users/itshatle/Desktop/rest/reac/src/components/redux/profile-reducer.js"],"names":["usersAPI","ADD_POST","UPDATE_NEW_POST_TEXT","SET_USER_PROFILE","SET_STATUS","initialState","PostsData","id","messange","like","newPostText","profile","status","profileReducer","state","action","type","newPost","message","newText","addPostActionCreator","updateNewPostTextActionCreator","text","setUserProfile","getUserProfile","userId","dispatch","getProfile","then","response","data"],"mappings":"AAAA,SAASA,QAAT,QAAyB,eAAzB;AAEA,MAAMC,QAAQ,GAAG,UAAjB;AACA,MAAMC,oBAAoB,GAAE,sBAA5B;AACA,MAAMC,gBAAgB,GAAG,kBAAzB;AACA,MAAMC,UAAU,GAAG,YAAnB;AAEA,IAAIC,YAAY,GAAG;AACfC,EAAAA,SAAS,EAAC,CACN;AAACC,IAAAA,EAAE,EAAC,CAAJ;AAAOC,IAAAA,QAAQ,EAAC,IAAhB;AAAsBC,IAAAA,IAAI,EAAC;AAA3B,GADM,EAEN;AAACF,IAAAA,EAAE,EAAC,CAAJ;AAAOC,IAAAA,QAAQ,EAAC,IAAhB;AAAsBC,IAAAA,IAAI,EAAC;AAA3B,GAFM,CADK;AAKfC,EAAAA,WAAW,EAAG,cALC;AAMfC,EAAAA,OAAO,EAAE,IANM;AAOfC,EAAAA,MAAM,EAAE;AAPO,CAAnB;;AAWA,MAAMC,cAAc,GAAG,CAACC,KAAK,GAAGT,YAAT,EAAuBU,MAAvB,KAAkC;AACrD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKf,QAAL;AAAe;AACX,YAAIgB,OAAO,GAAG;AACVV,UAAAA,EAAE,EAAC,CADO;AAEVW,UAAAA,OAAO,EAAEJ,KAAK,CAACJ,WAFL;AAGVD,UAAAA,IAAI,EAAE;AAHI,SAAd;AAKA,eAAM,EACF,GAAGK,KADD;AAEFR,UAAAA,SAAS,EAAE,CAAC,GAAGQ,KAAK,CAACR,SAAV,EAAqBW,OAArB,CAFT;AAGFP,UAAAA,WAAW,EAAG;AAHZ,SAAN;AAKH;;AACD,SAAKR,oBAAL;AAA2B;AACvB,eAAO,EACH,GAAGY,KADA;AAEHJ,UAAAA,WAAW,EAAGK,MAAM,CAACI;AAFlB,SAAP;AAIH;;AACD,SAAKhB,gBAAL;AAAuB;AACnB,eAAO,EACH,GAAGW,KADA;AAEHH,UAAAA,OAAO,EAAEI,MAAM,CAACJ;AAFb,SAAP;AAIH;;AACD,SAAKP,UAAL;AAAiB;AACb,eAAO,EACH,GAAGU,KADA;AAEHF,UAAAA,MAAM,EAAEG;AAFL,SAAP;AAIH;;AACD;AACI,aAAOD,KAAP;AAhCR;AAoCH,CArCD;;AAuCA,OAAO,MAAMM,oBAAoB,GAAG,MAAM;AAEtC,SAAO;AAACJ,IAAAA,IAAI,EAAEf;AAAP,GAAP;AACH,CAHM;AAIP,OAAO,MAAMoB,8BAA8B,GAAIC,IAAD,IAAU;AACpD,SAAO;AAACN,IAAAA,IAAI,EAAEd,oBAAP;AAA6BiB,IAAAA,OAAO,EAAEG;AAAtC,GAAP;AACH,CAFM;AAGP,OAAO,MAAMC,cAAc,GAAIZ,OAAD,IAAa;AACvC,SAAO;AAACK,IAAAA,IAAI,EAACb,gBAAN;AAAwBQ,IAAAA;AAAxB,GAAP;AACH,CAFM;AAGP,OAAO,MAAMa,cAAc,GAAIC,MAAD,IAAaC,QAAD,IAAc;AACpD1B,EAAAA,QAAQ,CAAC2B,UAAT,CAAoBF,MAApB,EAA4BG,IAA5B,CAAiCC,QAAQ,IAAI;AAEzCH,IAAAA,QAAQ,CAACH,cAAc,CAACM,QAAQ,CAACC,IAAV,CAAf,CAAR;AAEH,GAJD,EADoD,CAMrD;AACF,CAPM;AAYP,eAAejB,cAAf","sourcesContent":["import { usersAPI } from \"../../api/api\";\n\nconst ADD_POST = 'ADD_POST';\nconst UPDATE_NEW_POST_TEXT ='UPDATE-NEW-POST-TEXT';\nconst SET_USER_PROFILE = 'SET_USER_PROFILE'\nconst SET_STATUS = 'SET_STATUS'\n\nlet initialState = {\n    PostsData:[\n        {id:1, messange:\"hi\", like:12},\n        {id:2, messange:\"hi\", like:23}\n        ],\n    newPostText : \"what happen?\",\n    profile: null,\n    status: '',\n        \n}\n\nconst profileReducer = (state = initialState, action) => {\n    switch(action.type) {\n        case ADD_POST: {\n            let newPost = {\n                id:5,\n                message: state.newPostText,\n                like: 0\n            };\n            return{\n                ...state,\n                PostsData: [...state.PostsData, newPost],\n                newPostText : ''\n            };\n        }\n        case UPDATE_NEW_POST_TEXT: {\n            return {\n                ...state,\n                newPostText : action.newText\n            }\n        }\n        case SET_USER_PROFILE: {\n            return {\n                ...state,\n                profile: action.profile\n            }\n        }\n        case SET_STATUS: {\n            return {\n                ...state,\n                status: action\n            }\n        }\n        default:\n            return state;\n    }\n\n   \n}\n\nexport const addPostActionCreator = () => {\n   \n    return {type: ADD_POST}\n};\nexport const updateNewPostTextActionCreator = (text) => {\n    return {type: UPDATE_NEW_POST_TEXT, newText: text}\n};\nexport const setUserProfile = (profile) => {\n    return {type:SET_USER_PROFILE, profile}\n};\nexport const getUserProfile = (userId) => (dispatch) => {\n    usersAPI.getProfile(userId).then(response => {\n              \n        dispatch(setUserProfile(response.data));\n        \n    });\n   // ({type:SET_USER_PROFILE, profile})\n}  \n\n\n\n\nexport default profileReducer;"]},"metadata":{},"sourceType":"module"}