{"ast":null,"code":"import React from'react';import{NavLink,Redirect}from'react-router-dom';import classes from\"./Dialogs.module.css\";import DialogItem from\"./DialogItem\";import DialogMessage from\"./DialogMessage\";import{sendMessageCreator,updateNewMessageBodyCreator}from'../redux/dialog-reducer';import{reduxForm,Field}from'redux-forms/lib/reducer';import{Textarea}from'../common/Preloader/FormsControls/FormsControls';import{maxLengthCreator,required}from'../../helper/validator/validators';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Dialogs=function Dialogs(props){var state=props.dialogPage;var DialogsElement=state.DialogsData.map(function(dialog){return/*#__PURE__*/_jsx(DialogItem,{name:dialog.name,id:dialog.id},dialog.id);});var MessangesElement=state.MessageData.map(function(messange){return/*#__PURE__*/_jsx(DialogMessage,{messange:messange.messange},messange.id);});var newMessageBody=state.newMessageBody;var addNewMessage=function addNewMessage(values){props.sendMessage(values.newMessageBody);};if(!props.isAuth)return/*#__PURE__*/_jsx(Redirect,{to:'/login'});return/*#__PURE__*/_jsxs(\"div\",{className:classes.dialogs,children:[/*#__PURE__*/_jsx(\"div\",{className:classes.dialogsItems,children:DialogsElement}),/*#__PURE__*/_jsxs(\"div\",{className:classes.messanges,children:[/*#__PURE__*/_jsxs(\"div\",{children:[\" \",MessangesElement,\" \"]}),/*#__PURE__*/_jsx(\"addMessageFormRedux\",{onSubmit:addNewMessage})]})]});};var maxLength=maxLengthCreator(100);var addMessageForm=function addMessageForm(props){return/*#__PURE__*/_jsxs(\"form\",{onSubmit:props.handleSubmit,children:[/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(Field,{component:Textarea,validate:[required,maxLength],name:\"newMessageBody\",placeholder:\"write text\"})}),/*#__PURE__*/_jsxs(\"div\",{children:[\" \",/*#__PURE__*/_jsx(\"button\",{children:\"click\"}),\"  \"]})]});};export var addMessageFormRedux=reduxForm({formsReducer:'dialogAddMessageForm'})(addMessageForm);export default Dialogs;","map":{"version":3,"sources":["/Users/itshatle/Desktop/rest/reac/src/components/Dialogs/Dialogs.jsx"],"names":["React","NavLink","Redirect","classes","DialogItem","DialogMessage","sendMessageCreator","updateNewMessageBodyCreator","reduxForm","Field","Textarea","maxLengthCreator","required","Dialogs","props","state","dialogPage","DialogsElement","DialogsData","map","dialog","name","id","MessangesElement","MessageData","messange","newMessageBody","addNewMessage","values","sendMessage","isAuth","dialogs","dialogsItems","messanges","maxLength","addMessageForm","handleSubmit","addMessageFormRedux","formsReducer"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,OAAT,CAAkBC,QAAlB,KAAkC,kBAAlC,CACA,MAAOC,CAAAA,OAAP,KAAoB,sBAApB,CACA,MAAOC,CAAAA,UAAP,KAAuB,cAAvB,CACA,MAAOC,CAAAA,aAAP,KAA0B,iBAA1B,CACA,OAASC,kBAAT,CAA6BC,2BAA7B,KAAgE,yBAAhE,CACA,OAASC,SAAT,CAAoBC,KAApB,KAAkC,yBAAlC,CACA,OAASC,QAAT,KAAyB,iDAAzB,CACA,OAASC,gBAAT,CAA2BC,QAA3B,KAA2C,mCAA3C,C,wFAKA,GAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACC,KAAD,CAAW,CACvB,GAAIC,CAAAA,KAAK,CAAGD,KAAK,CAACE,UAAlB,CAEA,GAAIC,CAAAA,cAAc,CAAGF,KAAK,CAACG,WAAN,CAAkBC,GAAlB,CAAsB,SAACC,MAAD,qBAAY,KAAC,UAAD,EAAY,IAAI,CAAEA,MAAM,CAACC,IAAzB,CAA+C,EAAE,CAAED,MAAM,CAACE,EAA1D,EAAoCF,MAAM,CAACE,EAA3C,CAAZ,EAAtB,CAArB,CAEA,GAAIC,CAAAA,gBAAgB,CAAGR,KAAK,CAACS,WAAN,CAAkBL,GAAlB,CAAsB,SAAAM,QAAQ,qBAAI,KAAC,aAAD,EAAiC,QAAQ,CAAEA,QAAQ,CAACA,QAApD,EAAoBA,QAAQ,CAACH,EAA7B,CAAJ,EAA9B,CAAvB,CAEA,GAAII,CAAAA,cAAc,CAAGX,KAAK,CAACW,cAA3B,CAIA,GAAIC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACC,MAAD,CAAY,CAC5Bd,KAAK,CAACe,WAAN,CAAkBD,MAAM,CAACF,cAAzB,EACH,CAFD,CAIA,GAAG,CAACZ,KAAK,CAACgB,MAAV,CAAkB,mBAAO,KAAC,QAAD,EAAU,EAAE,CAAE,QAAd,EAAP,CAElB,mBACI,aAAK,SAAS,CAAE3B,OAAO,CAAC4B,OAAxB,wBACI,YAAK,SAAS,CAAE5B,OAAO,CAAC6B,YAAxB,UACKf,cADL,EADJ,cAII,aAAK,SAAS,CAAEd,OAAO,CAAC8B,SAAxB,wBACI,2BAAOV,gBAAP,OADJ,cAEI,4BAAqB,QAAQ,CAAEI,aAA/B,EAFJ,GAJJ,GADJ,CAWH,CA5BD,CA8BA,GAAIO,CAAAA,SAAS,CAAGvB,gBAAgB,CAAC,GAAD,CAAhC,CAEA,GAAMwB,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACrB,KAAD,CAAW,CAC9B,mBACI,cAAM,QAAQ,CAAEA,KAAK,CAACsB,YAAtB,wBACI,kCACI,KAAC,KAAD,EAAO,SAAS,CAAE1B,QAAlB,CAA4B,QAAQ,CAAE,CAACE,QAAD,CAAUsB,SAAV,CAAtC,CAA4D,IAAI,CAAC,gBAAjE,CAAkF,WAAW,CAAC,YAA9F,EADJ,EADJ,cAII,wCAAM,iCAAN,QAJJ,GADJ,CAQH,CATD,CAYA,MAAO,IAAMG,CAAAA,mBAAmB,CAAG7B,SAAS,CAAE,CAE1C8B,YAAY,CAAE,sBAF4B,CAAF,CAAT,CAG9BH,cAH8B,CAA5B,CAMP,cAAetB,CAAAA,OAAf","sourcesContent":["import React from 'react';\nimport { NavLink, Redirect } from 'react-router-dom';\nimport classes from \"./Dialogs.module.css\";\nimport DialogItem from \"./DialogItem\"\nimport DialogMessage from \"./DialogMessage\";\nimport { sendMessageCreator, updateNewMessageBodyCreator } from '../redux/dialog-reducer';\nimport { reduxForm, Field }  from 'redux-forms/lib/reducer'\nimport { Textarea } from '../common/Preloader/FormsControls/FormsControls';\nimport { maxLengthCreator, required } from '../../helper/validator/validators';\n\n\n\n\nconst Dialogs = (props) => {\n    let state = props.dialogPage;\n\n    let DialogsElement = state.DialogsData.map((dialog) => <DialogItem name={dialog.name} key={dialog.id} id={dialog.id} />);\n\n    let MessangesElement = state.MessageData.map(messange => <DialogMessage key={messange.id} messange={messange.messange}/>)\n\n    let newMessageBody = state.newMessageBody;\n\n\n\n    let addNewMessage = (values) => {\n        props.sendMessage(values.newMessageBody)\n    }\n\n    if(!props.isAuth) return <Redirect to={'/login'}/>\n\n    return (\n        <div className={classes.dialogs}>\n            <div className={classes.dialogsItems}>\n                {DialogsElement}\n            </div>\n            <div className={classes.messanges}>\n                <div> {MessangesElement} </div>\n                <addMessageFormRedux onSubmit={addNewMessage} />\n            </div>\n        </div>\n    )\n}\n\nlet maxLength = maxLengthCreator(100);\n\nconst addMessageForm = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit} >\n            <div> \n                <Field component={Textarea} validate={[required,maxLength]} name='newMessageBody' placeholder='write text' />\n            </div>\n            <div> <button >click</button>  </div>\n        </form>\n    )\n}\n\n\nexport const addMessageFormRedux = reduxForm ({\n    \n    formsReducer: 'dialogAddMessageForm'\n  })(addMessageForm)\n\n\nexport default Dialogs;\n\n"]},"metadata":{},"sourceType":"module"}