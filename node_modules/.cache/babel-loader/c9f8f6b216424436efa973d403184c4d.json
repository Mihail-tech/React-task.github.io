{"ast":null,"code":"var _jsxFileName = \"/Users/itshatle/Desktop/rest/reac/src/components/Dialogs/DialogsContainer.jsx\";\nimport React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport classes from \"./Dialogs.module.css\";\nimport DialogItem from \"./DialogItem\";\nimport DialogMessage from \"./DialogMessage\";\nimport { sendMessageCreator, updateNewMessageBodyCreator } from '../redux/dialog-reducer';\nimport Dialogs from './Dialogs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DialogsContainer = props => {\n  let state = props.store.getState().dialogPage;\n  let DialogsElement = state.DialogsData.map(dialog => /*#__PURE__*/_jsxDEV(DialogItem, {\n    name: dialog.name,\n    id: dialog.id\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 60\n  }, this));\n  let MessangesElement = state.MessageData.map(messange => /*#__PURE__*/_jsxDEV(DialogMessage, {\n    messange: messange.messange\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 62\n  }, this));\n  let newMessageBody = state.newMessageBody;\n\n  let onSendMessageClick = () => {\n    props.store.dispatch(sendMessageCreator());\n  };\n\n  let onNewMessageClick = body => {\n    props.store.dispatch(updateNewMessageBodyCreator(body));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Dialogs, {\n    updateNewMessageBody: onNewMessageClick,\n    sendMessage: onSendMessageClick,\n    dialogPage: state\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n};\n\n_c = DialogsContainer;\nexport default DialogsContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"DialogsContainer\");","map":{"version":3,"sources":["/Users/itshatle/Desktop/rest/reac/src/components/Dialogs/DialogsContainer.jsx"],"names":["React","NavLink","classes","DialogItem","DialogMessage","sendMessageCreator","updateNewMessageBodyCreator","Dialogs","DialogsContainer","props","state","store","getState","dialogPage","DialogsElement","DialogsData","map","dialog","name","id","MessangesElement","MessageData","messange","newMessageBody","onSendMessageClick","dispatch","onNewMessageClick","body"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,kBAAxB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,SAASC,kBAAT,EAA6BC,2BAA7B,QAAgE,yBAAhE;AACA,OAAOC,OAAP,MAAoB,WAApB;;;AAKA,MAAMC,gBAAgB,GAAIC,KAAD,IAAW;AAEhC,MAAIC,KAAK,GAAGD,KAAK,CAACE,KAAN,CAAYC,QAAZ,GAAuBC,UAAnC;AAEA,MAAIC,cAAc,GAAGJ,KAAK,CAACK,WAAN,CAAkBC,GAAlB,CAAuBC,MAAM,iBAAK,QAAC,UAAD;AAAY,IAAA,IAAI,EAAEA,MAAM,CAACC,IAAzB;AAA+B,IAAA,EAAE,EAAED,MAAM,CAACE;AAA1C;AAAA;AAAA;AAAA;AAAA,UAAlC,CAArB;AAEA,MAAIC,gBAAgB,GAAGV,KAAK,CAACW,WAAN,CAAkBL,GAAlB,CAAsBM,QAAQ,iBAAI,QAAC,aAAD;AAAe,IAAA,QAAQ,EAAEA,QAAQ,CAACA;AAAlC;AAAA;AAAA;AAAA;AAAA,UAAlC,CAAvB;AAEA,MAAIC,cAAc,GAAGb,KAAK,CAACa,cAA3B;;AAGA,MAAIC,kBAAkB,GAAG,MAAM;AAE3Bf,IAAAA,KAAK,CAACE,KAAN,CAAYc,QAAZ,CAAqBpB,kBAAkB,EAAvC;AAEH,GAJD;;AAMA,MAAIqB,iBAAiB,GAAIC,IAAD,IAAU;AAC9BlB,IAAAA,KAAK,CAACE,KAAN,CAAYc,QAAZ,CAAqBnB,2BAA2B,CAACqB,IAAD,CAAhD;AACH,GAFD;;AAIA,sBACI,QAAC,OAAD;AAAS,IAAA,oBAAoB,EAAED,iBAA/B;AACA,IAAA,WAAW,EAAGF,kBADd;AAEA,IAAA,UAAU,EAAEd;AAFZ;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CA1BD;;KAAMF,gB;AA4BN,eAAeA,gBAAf","sourcesContent":["import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport classes from \"./Dialogs.module.css\";\nimport DialogItem from \"./DialogItem\"\nimport DialogMessage from \"./DialogMessage\";\nimport { sendMessageCreator, updateNewMessageBodyCreator } from '../redux/dialog-reducer';\nimport Dialogs from './Dialogs';\n\n\n\n\nconst DialogsContainer = (props) => {\n\n    let state = props.store.getState().dialogPage;\n\n    let DialogsElement = state.DialogsData.map( dialog =>  <DialogItem name={dialog.name} id={dialog.id} />)\n\n    let MessangesElement = state.MessageData.map(messange => <DialogMessage messange={messange.messange}/>)\n\n    let newMessageBody = state.newMessageBody;\n\n\n    let onSendMessageClick = () => {\n\n        props.store.dispatch(sendMessageCreator())\n\n    }\n    \n    let onNewMessageClick = (body) => {\n        props.store.dispatch(updateNewMessageBodyCreator(body))\n    }\n\n    return (\n        <Dialogs updateNewMessageBody={onNewMessageClick} \n        sendMessage= {onSendMessageClick} \n        dialogPage={state}/>\n    )\n}\n\nexport default DialogsContainer;\n\n"]},"metadata":{},"sourceType":"module"}